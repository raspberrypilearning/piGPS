import threading
import serial
import time
import re

class GPS(object):

    def __init__(self):

        self.datastream = serial.Serial("/dev/ttyAMA0", 9600, timeout=0.5)
        self.gpsData = {'fix':0,'time':0,'lat':0,'lon':0,'alt':0,'sat':0}        
        self.debug = True


        thread = threading.Thread(target=self.run, args=())
        thread.daemon = True                            # Daemonize thread
        thread.start()                                  # Start the execution

    @property
    def fix(self):
        if self.gpsData['fix'] == 0:
            return False
        else:
            return True  
    @property
    def time(self):
        return self.gpsData['time']
    @property
    def lat(self):
        return self.gpsData['lat']
    @property
    def lon(self):
        return self.gpsData['lon']
    @property
    def alt(self):
        return self.gpsData['alt']
    @property
    def sat(self):
        return self.gpsData['sat']
    @property
    def gps(self):
        return self.gpsData

    def checksum(self,sentence):
    
        sentence = sentence.rstrip('\n').lstrip('$')
        data,cs1 = re.split('\*', sentence)
    
        cs2 = 0
        for c in data:
            cs2 ^= ord(c)

        if int(cs1,16)==cs2:
            return True
        else:
            return False

    def nmeaToDec(self,dm,dir):
        if not dm or dm == '':
            return 0.
        print(dm)
        match = re.match(r'^(\d+)(\d\d\.\d+)$', dm) 
        if match:
            d, m = match.groups()
        if dir == "W":
            sign = -1
        else:
            sign = 1
        return (float(d) + float(m) / 60)*sign


    def parseGGA(self,ggaString):
        gpsList = ggaString.split(",")
        self.gpsData['time'] = gpsList[1]
        self.gpsData['lat']  = self.nmeaToDec(gpsList[2],gpsList[3])
        self.gpsData['lon']  = self.nmeaToDec(gpsList[4],gpsList[5])
        self.gpsData['alt'] = gpsList[10]
        self.gpsData['sat'] = int(gpsList[7])
        self.gpsData['fix'] = int(gpsList[6])
        print (self.gpsdata)
        if self.debug:
                    print(gpsList,"/n",self.gpsData)

        
    def run(self):
        while True:
            # Do something
            byteSentence = self.datastream.readline()
            try:
                nmeaSentence = byteSentence.decode("utf-8")
            except:
                nmeaSentence = "Decode Error"

            if nmeaSentence[3:6] == "GGA":
                if self.debug:
                    print(nmeaSentence,self.checksum(nmeaSentence))

                if self.checksum(nmeaSentence):
                    self.parseGGA(nmeaSentence)
            time.sleep(0.2)
